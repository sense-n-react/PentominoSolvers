#!/usr/bin/env ruby
# -*- coding:utf-8 -*-

Lang :Ruby,       ext: 'rb'
Lang :Python,     ext: 'py'  do ['python3 -u', 'python -u'] end
Lang :Lua
Lang :Squirrel,   ext: 'nut' do 'sq' end
Lang :Julia,      ext: 'jl'
Lang :Javascript, ext: 'js'  do 'node' end

Lang :Typescript, ext: 'ts', base: 'solver-ts' do |l|
  "tsc --target es2019 --module commonjs --strict #{l.src} &&
     node #{l.src.sub(/\.ts$/, ".js")} #{l.o} "
end

Lang :Perl,       ext: 'pl'
Lang :Php
Lang :Groovy

Lang :Awk  do |l|
  awk = select_cmd( "gawk", "awk" )
  "#{awk} -f #{l.src} -- #{l.o}"
end

Lang :C  do |l|
  cc = select_cmd( "clang", "gcc" )
  "#{cc} -o #{l.src}.out -O2 -Wall #{l.src} && ./#{l.src}.out #{l.o}"
end

Lang :'C++',   ext: 'cpp'  do |l|
  cc = select_cmd( "clang++", "g++" )
  "#{cc} -o #{l.src}.out -O2 -Wall -std=c++17 #{l.src} && ./#{l.src}.out #{l.o}"
end

Lang :'C#',    ext: 'cs'  do |l|
  mono = exists?( "mono" ) ? "mono" : ''
  csc  = select_cmd( "mcs", "csc" )
  "#{csc} -nologo -optimize+ -out:#{l.src}.out #{l.src} &&
     #{mono} ./#{l.src}.out #{l.o}"
end

Lang :D  do |l|
  [ "ldc2 --of=#{l.src}.out -O2 #{l.src} && ./#{l.src}.out #{l.o}",
    "dmd   -of=#{l.src}.out -O  #{l.src} && ./#{l.src}.out #{l.o}" ]
end

Lang :Java,    base: 'Solver'  do |l|
  "javac -d build #{l.src} &&
     java -cp build #{l.src.sub(/\.\w+$/, '')} #{l.o}"
end

Lang :Kotlin,  ext: 'kt'  do |l|
  "kotlinc #{l.src} -include-runtime -d solver.jar &&
     kotlin solver.jar #{l.o}"
end

Lang :Go          do 'go run' end

Lang :Rust,    ext: 'rs'    do |l|
  [ "rust-script #{l.src} #{l.o}",
    "rustc -O -o #{l.src}.out #{l.src} &&  ./#{l.src}.out #{l.o}" ]
end

Lang :Swift  do |l|
  [ "swiftc -Ounchecked -o #{l.src}.out #{l.src} &&  ./#{l.src}.out #{l.o}",
    "swift #{l.src} #{l.o}" ]
end

Lang :Lisp  do |l|
  [ "sbcl --script #{l.src} #{l.o}",
    "clisp -q -c #{l.src} -o #{l.src}.fas &&  clisp #{l.src}.fas #{l.o}" ]
end

Lang :Crystal, ext: 'cr'  do |l|
  "crystal build --release -o #{l.src}.out #{l.src} &&  ./#{l.src}.out #{l.o}"
end

Lang :Elixir,  ext: 'exs'

Lang :'F#',    ext: 'fsx'  do |l|
  [ "fsi --optimize+ #{l.src} #{l.o}",
    "fsc --optimize+ -o #{l.src}.out #{l.src} &&  ./#{l.src}.out #{l.o}",
    "dotnet fsi --optimize+ #{l.src} #{l.o}" ]
end

###########################################################

BEGIN {
  LANG_DEF = []
  Lang     = Struct.new( 'Lang', :name, :prog, :src, :o )

  def Lang name, **o, &block
    ext  = o[:ext]  || name.to_s.downcase
    base = o[:base] || 'solver'
    prog = block    || Proc.new{ name.to_s.downcase }
    LANG_DEF << Lang.new( name, prog, "#{base}.#{ext}" )
  end
}

###########################################################
require 'optparse'

def options
  $O = {compile: true}

  exit(1) unless ARGV.options{|opt|
    opt.banner =<<EOT
Usage:  #{File.basename(__FILE__)} OPTION... ext...
    Execute PENTOMINO Solvers written in various programming languages.

    Lang/ext:
#{    LANG_DEF.sort_by{ |lang| lang.name }.
        each_with_object( [[]] ) do |lang,lines|
          lines[-1] << "#{lang.name}/#{lang.src[/[^.]+$/]}"
          lines << [lines[-1].pop]  if lines[-1].join( ', ' ).size > 60
        end.map { |words| '      ' + words.join( '  ' ) }.join( "\n" )
}

    ex: ./run-solver --size 8x8 ruby py
        # ruby solver.rb 8x8
        # python3 solver.py 8x8

EOT
    opt.on( '-a', '--all',  "execute all languages" )
    opt.on( '-s', '--size=WxH' ) { |v| v =~ /^\d+x\d+$/ ? v : nil }
    opt.on( '-d', '--debug', "execute with '--debug'" )
    opt.on( '-n', '--suppress' )
    opt.on( '--[no-]compile' )

    r = opt.parse!( into: $O )
    if ARGV.empty? && !$O[:all]
      puts opt.help
      exit
    end
    r
  }
end

###########################################################

def exists?( bin )
  %x[ type #{bin} > /dev/null 2>&1 ]
  $? == 0
end

def select_cmd( *progs )
  progs.select{ |prg| exists?( prg.split[0] ) }[0] || progs[-1]
end

def run( *cmds )
  cmds.each do |cmd|
    puts "    #{cmd}"
    bin = cmd.split[0]
    if ! exists?( bin )
      puts "    #{bin} doesn't exist."
      return true
    elsif $O[:suppress] == nil
      # swap stdout with stderr
      #   stderr:  output of solver
      #   stdout:  output of time command
      IO.popen( "bash -c 'time #{cmd}' 3>&1 1>&2 2>&3", "r+" ) do |io|
        while !io.eof
          puts io.gets
        end
      end
      return false  if $? != 0
    end # if
  end # each
  return true
end

###########################################################

def main()
  options()

  args = $O[:all] ?
            LANG_DEF.map { |lang| lang.name.to_s } :
            ARGV.map{ |s| s }

  args.each do |arg|
    lang = LANG_DEF.find{ |lang|
      lang.name.to_s.downcase == arg.downcase ||
        lang.src.sub( /\..+$/, '' ).downcase == arg.downcase
    }
    if lang.nil?
      puts "#{arg}? skip it"
      next
    end

    lang.o = [ $O[:debug] ? "--debug" : "", $O[:size].to_s ].join( " " ).strip

    puts "== #{lang.name} =="
    case result = lang.prog.call( lang )
    when String, Array
      cmd  = select_cmd( *result )
      cmd  = "#{cmd} #{lang.src} #{lang.o}"  if cmd !~/#{lang.src}/
      cmds = cmd.split( '&&' ).map{ |c| c.gsub(/\s+/, ' ').strip }
      cmds.shift  if cmds.size > 1 && $O[:compile] == false
      result = run *cmds
    end
    puts "#{lang.name}: failed\n"  unless result
  end # args
end

begin
  $stdout.sync = true
  main
rescue Interrupt
  puts "Interrupted"
rescue Errno::EPIPE
  puts $!
rescue
  puts $!.class
  puts $!
  puts $!.backtrace
end
